from django.conf import settings
from django.db import models

import re
import logging
from collections import OrderedDict
from datetime import timedelta, datetime
from django.db.models import Q, F
from django.db.models.signals import pre_save, post_save
from django.utils.timezone import utc
from django.utils.translation import ugettext as _
from django.conf import settings
from django.core.exceptions import ValidationError

PRODUCTTYPE = (
    ('newarrival', _('New Arrival')),
    ('bestseller', _('Best Sellers')),
    ('maylikethis', _('You May Like This')),
)

STATUS = (
    ('active', _('Active')),
    ('inactive', _('Inactive')),
    ('test', _('Test')),
)

class Attribute(models.Model):
  attribute_name = models.CharField(max_length=50, null=False)
  attribute_code =  models.CharField(max_length=150, null=False)
  attribute_price = models.FloatField(null=True, default=0.0) 
  attribute_desc =  models.TextField(max_length=150, null=False)
  attribute_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Attribute status, handle by Admin") 

  def __unicode__(self):
    return self.attribute_name if self.attribute_name else ''


class Review(models.Model):  
  reviews_details = models.CharField(max_length=150, blank=True)
  reviews_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Review status, handle by Admin") 

  def __unicode__(self):
    return self.reviews_details if self.reviews_details else ''



class Brand(models.Model):
  brands_name = models.CharField(max_length=150, blank=True)
  brands_details = models.TextField(max_length=150, blank=True)
  brands_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Brand status, handle by Admin") 

  def __unicode__(self):
    return self.brands_name if self.brands_name else ''


class Image(models.Model):
  image_name = models.CharField(max_length=150, blank=True)
  photos = models.ImageField(upload_to='static/img/photos/',null=True, max_length=500)
  thumbnail = models.ImageField(upload_to="static/img/thumbs/", null=True, editable=False, max_length=500)
  image_path = models.CharField(max_length=150, blank=True)
  image_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Image status, handle by Admin") 


  def __unicode__(self):
    return self.image_name if self.image_name else ''


class Category(models.Model):
  category_name = models.CharField(max_length=10, null=False) 
  category_desc = models.TextField(max_length=150, blank=True)
  category_image = models.ImageField(upload_to='static/img/photos/',null=True, max_length=500)
  category_thumbnail = models.ImageField(upload_to="static/img/thumbs/", null=True, editable=False, max_length=500)
  category_createddate = models.DateTimeField(auto_now=True, auto_now_add=True, help_text="Auto generated by system.")
  category_updatedate = models.DateTimeField(auto_now=True, auto_now_add=True, help_text="Auto generated by system.")
  category_metakeyword = models.TextField(max_length=150, blank=True)
  category_metadescripition = models.TextField(max_length=150, blank=True)
  category_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="CAtegory status, handle by Admin") 

  def __unicode__(self):
    return self.category_name if self.category_name else ''



class ShippingMethod(models.Model):
  shipping_code = models.CharField(max_length=15, blank=True) 
  shipping_name = models.CharField(max_length=55, blank=True) 
  shipping_methodtype = models.CharField(max_length=55, blank=True)
  shipping_floor = models.FloatField(null=True, default=0.0)
  shipping_amount = models.FloatField(null=True, default=0.0)
  shipping_isactive = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Shipping status, handle by Admin")

  def __unicode__(self):
    return self.shipping_name if self.shipping_name else ''


class Order(models.Model):
  user_id = models.IntegerField(max_length=5, blank=True)  
  amount = models.FloatField(null=True, default=0.0)
  order_shippingmethods = models.ForeignKey(ShippingMethod, verbose_name='Chosen ShippingMethod', null=False)
  shipping_address = models.TextField(max_length=150, blank=True)
  shipping_city = models.CharField(max_length=50, blank=True)
  shipping_email = models.CharField(max_length=50, blank=True)
  shipping_phonenumber = models.CharField(max_length=50, blank=True)
  billing_address = models.TextField(max_length=150, blank=True)  
  billing_city = models.CharField(max_length=50, blank=True)
  billing_email = models.CharField(max_length=50, blank=True)
  billing_phonenumber = models.CharField(max_length=50, blank=True)
  customer_comments = models.TextField(max_length=150, blank=True)  
  order_createddate = models.DateTimeField(auto_now_add=True, help_text="Date and time of orders created.")
  order_updatedate = models.DateTimeField(auto_now_add=True, help_text="Updated Date and time of orders Modifiy.")
  order_status = models.CharField(max_length=10, default='active', choices=STATUS, help_text="Order status, handle by Admin")  

  def __unicode__(self):
    return self.user_id if self.user_id else '' 


class Offer(models.Model):
  offer_type = models.CharField(max_length=150, blank=True)
  offer_amount = models.FloatField(null=True, default=0.0)
  offer_price = models.FloatField(null=True, default=0.0)
  start_date = models.DateTimeField(auto_now=True, auto_now_add=True, help_text="Auto generated by system.")
  end_date = models.DateTimeField(auto_now=True, auto_now_add=True, help_text="Auto generated by system.")

  def __unicode__(self):
    return self.offer_type if self.offer_type else ''


class Product(models.Model):
  product_title = models.CharField(max_length=50, null=False)
  product_shortdesc = models.TextField(max_length=150)
  product_desc = models.TextField(max_length=210, null=False)
  product_code = models.CharField(max_length=30, null=False)
  product_category = models.ForeignKey(Category, verbose_name='Chosen Category', null=False)     
  product_brands = models.ForeignKey(Brand, verbose_name='Chosen Brands', null=False)
  product_attributes = models.ForeignKey(Attribute, verbose_name='Chosen Attribute', null=False)
  product_reviews = models.ForeignKey(Review, verbose_name='Chosen Review', null=False)
  product_images = models.ForeignKey(Image, verbose_name='Chosen Images', null=False)  
  product_price = models.FloatField(null=True, default=0.0) 
  product_currency = models.CharField(max_length=15, blank=True)
  product_sale = models.IntegerField(max_length=15, blank=True)
  product_sold = models.IntegerField(max_length=15, blank=True)
  product_presold = models.IntegerField(max_length=15, blank=True)  
  product_availability = models.IntegerField(max_length=150, blank=True)
  product_offers = models.ForeignKey(Offer, verbose_name='Chosen Offer')
  product_createddate = models.DateTimeField(auto_now_add=True, help_text="Date and time of Products created.")
  product_updatedate = models.DateTimeField(auto_now_add=True, help_text="Updated Date and time of Products Modifiy.")
  product_type = models.CharField(max_length=10, default='active', choices=PRODUCTTYPE, help_text="ProductType, handle by Admin")
  product_status = models.CharField(max_length=10, default='active', choices=STATUS, help_text="ProductStatus, handle by Admin")

  def __unicode__(self):
    return self.product_title if self.product_title else ''

  def isactive(self):
    if self.product_status == 'active' and self.product_status and self.sale > self.sold:
      return True
    return False  

  def sell(self, actor, translation=None, order=None, quantity=1):
    """ Sells a single lead. It does not perform any e-commerce functionality here. It updates dashboard, lead and folders.  """

    from control.models import Folder, ActorBoughtLead
    # folder, created = Folder.objects.get_or_create(actor=actor, name="ALL")
    folder = None
    self.sold += quantity
    self.save()
    
    # ActorBoughtLead(actor=actor, lead=self, folders=folder).save()

  @property
  def total(self):
    """Tells total number of leads"""
    return self.sale + self.pre_sold

  def available(self):
    """Tells how many leads are now available for sale (Leads left)"""
    return self.sale - self.sold    
    
# class BasketItem(models.Model):
#   product_id  = models.IntegerField(max_length=15, blank=True)  
#   product_name = models.CharField(max_length=150, blank=True)
#   product_price = models.FloatField(null=True, default=0.0)
#   product_quantity = models.IntegerField(max_length=15, blank=True)



